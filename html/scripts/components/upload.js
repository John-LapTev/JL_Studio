const initializeImageUpload = () => {
    initializeDropZone();
    initializeUploadControls();
    initializePasteHandler();
    initializeStrengthControl();
};

const initializeDropZone = () => {
    const uploadArea = document.querySelector('.image-upload-area');
    if (!uploadArea) return;

    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });
    
    uploadArea.addEventListener('dragleave', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
    });
    
    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        
        if (!uploadArea.classList.contains('has-image')) {
            const file = e.dataTransfer.files[0];
            if (file?.type.startsWith('image/')) {
                handleImageUpload(file);
            }
        }
    });
    
    uploadArea.addEventListener('click', () => {
        if (!uploadArea.classList.contains('has-image')) {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.onchange = () => {
                if (input.files[0]) {
                    handleImageUpload(input.files[0]);
                }
            };
            input.click();
        }
    });
};

const initializeUploadControls = () => {
    const controls = document.querySelector('.image-controls');
    if (!controls) return;

    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∫–Ω–æ–ø–æ–∫
    const buttonsGroup = document.createElement('div');
    buttonsGroup.className = 'image-buttons-group';

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const uploadButton = document.createElement('button');
    uploadButton.className = 'image-control-button';
    uploadButton.title = '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª';
    uploadButton.textContent = 'üìÅ';

    const cameraButton = document.createElement('button');
    cameraButton.className = 'image-control-button';
    cameraButton.title = '–°–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫';
    cameraButton.textContent = 'üì∑';

    const pasteButton = document.createElement('button');
    pasteButton.className = 'image-control-button';
    pasteButton.title = '–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞';
    pasteButton.textContent = 'üìã';

    const removeButton = document.createElement('button');
    removeButton.className = 'image-control-button remove-button';
    removeButton.title = '–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
    removeButton.textContent = 'üóëÔ∏è';
    removeButton.style.display = 'none';

    buttonsGroup.appendChild(uploadButton);
    buttonsGroup.appendChild(cameraButton);
    buttonsGroup.appendChild(pasteButton);
    buttonsGroup.appendChild(removeButton);
    controls.appendChild(buttonsGroup);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    uploadButton.onclick = () => document.querySelector('.image-upload-area')?.click();
    cameraButton.onclick = () => initializeCamera();
    pasteButton.onclick = () => handlePasteFromClipboard();
    removeButton.onclick = () => removeUploadedImage();
};

const removeUploadedImage = () => {
    const uploadArea = document.querySelector('.image-upload-area');
    const removeButton = document.querySelector('.remove-button');
    const strengthControl = document.querySelector('.strength-control');

    if (uploadArea) {
        uploadArea.innerHTML = `
            <div class="upload-placeholder">
                –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            </div>
        `;
        uploadArea.classList.remove('has-image');
    }

    if (removeButton) removeButton.style.display = 'none';
    if (strengthControl) strengthControl.style.display = 'none';
};

const initializePasteHandler = () => {
    document.addEventListener('paste', handlePaste);
};

const handlePaste = async (e) => {
    try {
        const items = e.clipboardData?.items;
        if (!items) return;

        for (const item of items) {
            if (item.type.indexOf('image') === 0) {
                const file = item.getAsFile();
                await handleImageUpload(file);
                break;
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏–∑ –±—É—Ñ–µ—Ä–∞:', error);
    }
};

const handlePasteFromClipboard = async () => {
    try {
        const clipboardItems = await navigator.clipboard.read();
        for (const clipboardItem of clipboardItems) {
            for (const type of clipboardItem.types) {
                if (type.startsWith('image/')) {
                    const blob = await clipboardItem.getType(type);
                    const file = new File([blob], 'pasted-image.png', { type });
                    await handleImageUpload(file);
                    return;
                }
            }
        }
        alert('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞');
    }
};

const handleImageUpload = async (file) => {
    if (!validateImage(file)) return;

    const reader = new FileReader();
    const uploadArea = document.querySelector('.image-upload-area');
    const strengthControl = document.querySelector('.strength-control');
    const removeButton = document.querySelector('.remove-button');
    
    reader.onload = async (e) => {
        try {
            const img = document.createElement('img');
            img.src = e.target.result;
            
            img.onload = () => {
                if (uploadArea) {
                    uploadArea.innerHTML = '';
                    uploadArea.appendChild(img);
                    uploadArea.classList.add('has-image');
                }
                if (strengthControl) {
                    strengthControl.style.display = 'block';
                }
                if (removeButton) {
                    removeButton.style.display = 'block';
                }
                img.style.display = 'block';
                img.style.maxWidth = '100%';
                img.style.maxHeight = '100%';
                img.style.margin = 'auto';
                img.style.objectFit = 'contain';
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
    };
    
    reader.onerror = () => {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
        alert('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
    };
    
    reader.readAsDataURL(file);
};

const initializeStrengthControl = () => {
    const strengthControl = document.querySelector('.strength-control');
    if (!strengthControl) return;

    const strengthSlider = strengthControl.querySelector('.strength-slider');
    const strengthValue = strengthControl.querySelector('.value');
    const resetButton = strengthControl.querySelector('.reset-button');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 0.8 (—Ä–µ–∞–ª—å–Ω–æ–µ 0.4)
    if (strengthSlider) {
        strengthSlider.value = 0.8;
        strengthSlider.max = 1.0;
        strengthSlider.addEventListener('input', () => {
            // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–µ (0-1 -> 0-0.5)
            const visualValue = parseFloat(strengthSlider.value);
            const realValue = visualValue * 0.5;
            
            if (strengthValue) {
                strengthValue.textContent = `${visualValue.toFixed(2)} ‚úé`;
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ data-–∞—Ç—Ä–∏–±—É—Ç
                strengthSlider.dataset.realValue = realValue.toString();
            }
        });
        strengthSlider.dispatchEvent(new Event('input'));
    }
}; 

const initializeCamera = async () => {
    const uploadArea = document.querySelector('.image-upload-area');
    if (!uploadArea) return;

    try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        const video = document.createElement('video');
        video.srcObject = stream;
        video.autoplay = true;
        video.style.width = '100%';
        video.style.height = 'auto';
        
        uploadArea.innerHTML = '';
        uploadArea.appendChild(video);

        const captureButton = document.createElement('button');
        captureButton.textContent = '–°–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫';
        captureButton.className = 'capture-button';
        uploadArea.appendChild(captureButton);

        captureButton.onclick = () => {
            const canvas = document.createElement('canvas');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(video, 0, 0);

            stream.getTracks().forEach(track => track.stop());
            
            canvas.toBlob(blob => {
                const file = new File([blob], 'camera-capture.png', { type: 'image/png' });
                handleImageUpload(file);
            }, 'image/png');
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ');
    }
};

const validateImage = (file) => {
    const validTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
    if (!validTypes.includes(file.type)) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG, PNG, WEBP –∏–ª–∏ GIF');
        return false;
    }
    
    const maxSize = 10 * 1024 * 1024; // 10MB
    if (file.size > maxSize) {
        alert('–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
        return false;
    }
    
    return true;
};

window.upload = {
    initializeImageUpload,
    handlePaste,
    handlePasteFromClipboard,
    handleImageUpload,
    validateImage,
    removeUploadedImage
};