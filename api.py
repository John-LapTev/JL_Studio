"""
JL Studio - API —Å–µ—Ä–≤–µ—Ä
–í–µ—Ä—Å–∏—è: 1.0
"""

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import StreamingResponse, JSONResponse, FileResponse
from pydantic import BaseModel
from typing import Optional, List
import json
import torch
from pathlib import Path
import asyncio
import logging
import signal
import sys
import os
import subprocess
import re
import pandas as pd 
from datetime import datetime
from PIL import Image
import base64
import io
import traceback
import shutil
import time

# –ò–º–ø–æ—Ä—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app import (
    jl_pipe, jl_good_vae, jl_pipe_i2i, jl_loras, JL_load_local_loras
)
from live_preview_helpers import JL_flux_pipe_call_that_returns_an_iterable_of_images

# –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ HTTP-–ª–æ–≥–æ–≤
uvicorn_logger = logging.getLogger("uvicorn.access")
uvicorn_logger.disabled = True

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(title="JL Studio API")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
output_dir = Path("output")
output_dir.mkdir(exist_ok=True)

img2img_dir = Path("img2img")
img2img_dir.mkdir(exist_ok=True)

loras_dir = Path("models/flux/loras")
loras_dir.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_time(seconds):
    minutes = int(seconds // 60)
    seconds = int(seconds % 60)
    if minutes > 0:
        return f"{minutes}–º {seconds}—Å"
    return f"{seconds}—Å"

def get_stage(progress: float) -> str:
    if progress < 0.2: return "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏..."
    elif progress < 0.4: return "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤..."
    elif progress < 0.6: return "–ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π..."
    elif progress < 0.8: return "–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞..."
    return "–§–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∏..."

def calculate_actual_steps(steps: int, strength: float) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    
    Args:
        steps (int): –ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        strength (float): –°–∏–ª–∞ –≤–ª–∏—è–Ω–∏—è (0-1)
        
    Returns:
        int: –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    """
    # –§–æ—Ä–º—É–ª–∞: actual_steps = desired_steps / (1 - strength)
    real_strength = calculate_img2img_impact(strength)
    adjusted_steps = int(steps / (1 - real_strength))
    return min(adjusted_steps, 35)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ 50 —à–∞–≥–æ–≤

def calculate_img2img_impact(visual_strength: float) -> float:
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–µ
    
    Args:
        visual_strength (float): –ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1 –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        float: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0.5-1.0:
    # visual 0.0 -> 1.0 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
    # visual 1.0 -> 0.5 (—É–º–µ—Ä–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
    return 1.0 - (visual_strength * 0.5)

def check_prompt_length(prompt: str, max_tokens: int = 77) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–µ–∑–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    
    Args:
        prompt (str): –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        max_tokens (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 77.
        
    Returns:
        str: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    """
    tokens = prompt.split()
    if len(tokens) > max_tokens:
        print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!")
        print(f"‚îú‚îÄ –¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤") 
        print(f"‚îú‚îÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
        print("‚îî‚îÄ –ö–æ–Ω–µ—Ü –ø—Ä–æ–º–ø—Ç–∞ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω\n")
        return ' '.join(tokens[:max_tokens])
    return prompt

@app.get("/api/random-prompt")
async def get_random_prompt():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –±–∞–∑—ã"""
    try:
        if not hasattr(app, 'prompts_df'):
            app.prompts_df = pd.read_csv('prompts.csv', header=None, encoding='utf-8')
        
        random_prompt = app.prompts_df.sample().iloc[0, 0]
        return {"status": "success", "prompt": random_prompt}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))
    
# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class GenerationParams(BaseModel):
    max_sequence_length: int = 512
    prompt: str
    width: int = 1024
    height: int = 1024
    steps: int = 28
    cfg_scale: float = 3.5
    seed: Optional[int] = None
    lora_indices: List[str] = []
    lora_scales: List[float] = []
    image_input: Optional[str] = None
    image_strength: Optional[float] = 0.75
    randomize_seed: bool = True
    save_format: str = "PNG"
    save_quality: int = 100
    save_name_format: str = "prompt"

def print_generation_params(params: dict):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("\nüéØ –ü–ê–†–ê–ú–ï–¢–†–´ –ì–ï–ù–ï–†–ê–¶–ò–ò:")
    print(f"‚îú‚îÄ –†–∞–∑–º–µ—Ä—ã: {params['width']}x{params['height']}")
    print(f"‚îú‚îÄ –®–∞–≥–∏: {params['steps']}")
    print(f"‚îú‚îÄ CFG: {params['cfg_scale']}")
    print(f"‚îú‚îÄ Seed: {params['seed']} ({'—Å–ª—É—á–∞–π–Ω—ã–π' if params['randomize_seed'] else '—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'})")
    print(f"‚îú‚îÄ –§–æ—Ä–º–∞—Ç: {params['save_format'].upper()} (–∫–∞—á–µ—Å—Ç–≤–æ: {params['save_quality']}%)")
    if 'image_input' in params and params['image_input']:
        print(f"‚îî‚îÄ –°–∏–ª–∞ img2img: {params['image_strength']}")
    else:
        print("‚îî‚îÄ –†–µ–∂–∏–º: –æ–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
    print("="*80)

def decode_base64_image(base64_string: str) -> Image.Image:
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64 –≤ PIL Image"""
    try:
        if ',' in base64_string:
            base64_string = base64_string.split(',')[1]
        
        image_bytes = base64.b64decode(base64_string)
        image = Image.open(io.BytesIO(image_bytes))
        
        if image.mode != 'RGB':
            image = image.convert('RGB')
            
        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.size}")
        return image
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        raise ValueError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

def save_img2img_input(image: Image.Image, filename: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è img2img"""
    try:
        filepath = img2img_dir / filename
        image.save(filepath, format='PNG', optimize=False)
        return str(filepath)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return None

def sanitize_filename(prompt: str, max_length: int = 30) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    invalid_chars = '<>:"/\\|?*'
    filename = prompt
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    filename = " ".join(filename.split())[:max_length]
    return filename.strip()

def generate_filename(prompt: str, seed: int, fmt: str, name_format: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    timestamp = datetime.now().strftime("%d.%m.%Y_%H%M%S")
    
    if name_format == 'full':
        sanitized_prompt = sanitize_filename(prompt, max_length=15)
        filename = f"{timestamp}_{seed}_{sanitized_prompt}"
    elif name_format == 'date':
        filename = timestamp
    elif name_format == 'seed':
        filename = f"{timestamp}_{seed}"
    else:  # prompt
        filename = sanitize_filename(prompt, max_length=30)
        
    output_dir = Path("output")
    counter = 0
    while True:
        suffix = f"({counter})" if counter > 0 else ""
        filename_with_suffix = f"{filename}{suffix}"
        full_path = output_dir / f"{filename_with_suffix}.{fmt.lower()}"
        if not full_path.exists():
            break
        counter += 1
        
    return filename_with_suffix

async def download_online_lora(repo_id: str, save_dir: Path) -> Optional[dict]:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ LoRA –∏–∑ Hugging Face"""
    try:
        from huggingface_hub import hf_hub_download, list_repo_files
        
        style_dir = save_dir / "Style"
        style_dir.mkdir(exist_ok=True)
        
        repo_name = repo_id.split('/')[-1]
        lora_dir = style_dir / repo_name
        lora_dir.mkdir(exist_ok=True)

        logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ LoRA –∏–∑ {repo_id}")

        try:
            repo_files = await asyncio.to_thread(list_repo_files, repo_id)
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ {repo_id}")
            return None

        model_filename = next((f for f in repo_files if f.endswith(('.safetensors', '.ckpt', '.pt'))), None)
        if not model_filename:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –≤ {repo_id}")
            return None

        model_file = await asyncio.to_thread(
            hf_hub_download,
            repo_id=repo_id,
            filename=model_filename,
            local_dir=lora_dir
        )

        preview_file = None
        preview_extensions = ['.png', '.jpg', '.jpeg', '.webp']
        for filename in repo_files:
            if any(filename.lower().endswith(ext) for ext in preview_extensions):
                try:
                    preview_file = await asyncio.to_thread(
                        hf_hub_download,
                        repo_id=repo_id,
                        filename=filename,
                        local_dir=lora_dir
                    )
                    break
                except Exception:
                    continue

        if not preview_file:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–≤—å—é –¥–ª—è {repo_id}")

        return {
            "title": repo_name,
            "path": str(model_file),
            "preview": str(preview_file) if preview_file else None,
            "trigger_word": "",
            "trigger_position": "append"
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è LoRA {repo_id}: {str(e)}")
        return None

async def load_lora(pipe, lora_name: str, lora_dir: str, weight_name: str, adapter_name: Optional[str] = None) -> bool:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π LoRA –≤ –ø–∞–π–ø–ª–∞–π–Ω"""
    try:
        adapter_name = adapter_name or lora_name
        await asyncio.to_thread(
            pipe.load_lora_weights,
            lora_dir,
            weight_name=weight_name,
            adapter_name=adapter_name,
            local_files_only=True
        )
        logger.info(f"‚úÖ LoRA {lora_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LoRA {lora_name}: {str(e)}")
        return False

def get_online_lora(repo_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ LoRA –∏–∑ –≥–∞–ª–µ—Ä–µ–∏"""
    try:
        return next((lora for lora in jl_loras if lora.get('repo') == repo_id), None)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ LoRA {repo_id}: {str(e)}")
    return None

def find_local_lora_preview(lora_path: Path) -> Optional[str]:
    """–ü–æ–∏—Å–∫ –ø—Ä–µ–≤—å—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π LoRA"""
    try:
        lora_name = lora_path.stem
        preview_extensions = ['.png', '.jpg', '.jpeg', '.webp']
        
        for ext in preview_extensions:
            preview_path = lora_path.parent / f"{lora_name}{ext}"
            if preview_path.exists():
                return str(preview_path)
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–≤—å—é –¥–ª—è LoRA: {str(e)}")
        return None

# API endpoints
@app.get("/api/loras")
async def get_loras():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LoRA"""
    try:
        local_loras = JL_load_local_loras()
        for lora in local_loras:
            if 'path' in lora:
                lora_path = Path(lora['path'])
                lora['path'] = str(lora_path).replace('\\', '/')
                # –ü–æ–∏—Å–∫ –ø—Ä–µ–≤—å—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π LoRA
                preview = find_local_lora_preview(lora_path)
                if preview:
                    lora['preview'] = str(preview).replace('\\', '/')

        return {
            "status": "success",
            "data": {
                "gallery_loras": jl_loras,
                "local_loras": local_loras
            }
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ LoRA: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/open-loras-folder")
async def open_loras_folder():
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å LoRA –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ"""
    try:
        loras_path = Path("models/flux/loras").absolute()
        if sys.platform == 'win32':
            os.startfile(str(loras_path))
        elif sys.platform == 'darwin':  # macOS
            subprocess.run(['open', str(loras_path)])
        else:  # linux
            subprocess.run(['xdg-open', str(loras_path)])
        return {"status": "success"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—É—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –º–æ–¥–µ–ª–µ–π
@app.get("/models/{path:path}")
async def get_model_file(path: str):
    try:
        file_path = Path("models") / path
        if file_path.exists():
            return FileResponse(file_path)
        else:
            raise HTTPException(status_code=404, detail=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/generate")
async def generate_image(request: Request):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        data = await request.json()
        
        # –°–∫—Ä—ã–≤–∞–µ–º –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ö
        log_data = {k: v if k != 'image_input' else '[base64 image data]' for k, v in data.items()}
        print_generation_params(log_data)
        
        params = GenerationParams(**data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ img2img
        if params.image_input:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã –≤–ª–∏—è–Ω–∏—è –æ—Ç 0 –¥–æ 1
            params.image_strength = max(min(params.image_strength, 1.0), 0.0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—Ä–æ–º–ø—Ç–∞
        tokens = params.prompt.split()
        if len(tokens) > 77:
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!")
            print(f"‚îú‚îÄ –¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"‚îú‚îÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 77 —Ç–æ–∫–µ–Ω–æ–≤")
            print("‚îî‚îÄ –ö–æ–Ω–µ—Ü –ø—Ä–æ–º–ø—Ç–∞ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω\n")
            params.prompt = ' '.join(tokens[:77])

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º seed –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if params.randomize_seed or params.seed is None:
            params.seed = torch.randint(0, 2**32-1, (1,)).item()

        # –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        async def generate_stream():
            try:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ LoRA –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
                if params.lora_indices:
                    print("\n" + "="*80)
                    print("üé® –ü–û–î–ì–û–¢–û–í–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò:")
                    print(f"‚îú‚îÄ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {params.prompt}")
                    print("‚îÇ")
                    
                    print("‚îú‚îÄ üîÑ –ó–ê–ì–†–£–ó–ö–ê LoRA:")
                    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ LoRA
                    jl_pipe.unload_lora_weights()
                    if params.image_input is not None:
                        jl_pipe_i2i.unload_lora_weights()
                    
                    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç, –¥–æ–±–∞–≤–ª—è—è trigger words
                    modified_prompt = params.prompt
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—É—é LoRA –∏ –¥–æ–±–∞–≤–ª—è–µ–º trigger words
                    local_loras = JL_load_local_loras()
                    loaded_loras = []
                    
                    for i, lora_name in enumerate(params.lora_indices):
                        print(f"‚îÇ  ‚îú‚îÄ {lora_name}...", end=" ", flush=True)
                        
                        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ LoRA
                        lora = next((l for l in local_loras if l["title"] == lora_name), None)
                        
                        if not lora:
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–∞–ª–µ—Ä–µ—é
                            gallery_lora = next((l for l in jl_loras if l["title"] == lora_name), None)
                            
                            if gallery_lora:
                                print(f"(–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ {gallery_lora['repo']})")
                                downloaded_lora = await download_online_lora(gallery_lora['repo'], loras_dir)
                                
                                if downloaded_lora:
                                    lora = downloaded_lora
                                    lora['trigger_word'] = gallery_lora.get('trigger_word', '')
                                    lora['trigger_position'] = gallery_lora.get('trigger_position', 'append')
                                    
                                    if lora['trigger_word']:
                                        print(f"‚îÇ  ‚îÇ  ‚îî‚îÄ Trigger word: {lora['trigger_word']}")
                        
                        if lora:
                            # –î–æ–±–∞–≤–ª—è–µ–º trigger word –µ—Å–ª–∏ –µ—Å—Ç—å
                            if "trigger_word" in lora and lora["trigger_word"]:
                                trigger_word = lora["trigger_word"]
                                if lora.get("trigger_position") == "prepend":
                                    modified_prompt = f"{trigger_word.strip()} {modified_prompt}"
                                else:
                                    modified_prompt = f"{modified_prompt} {trigger_word.strip()}"
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º LoRA
                            lora_path = Path(lora["path"])
                            adapter_name = f"jl_lora_{i}"
                            adapter_name_i2i = f"jl_lora_i2i_{i}"
                            
                            if await load_lora(jl_pipe, lora_name, str(lora_path.parent), lora_path.name, adapter_name):
                                loaded_loras.append((lora_name, i))
                                if params.image_input is not None:
                                    await load_lora(jl_pipe_i2i, lora_name, str(lora_path.parent), lora_path.name, adapter_name_i2i)
                                print("‚úÖ")
                            else:
                                print("‚ùå")

                    if loaded_loras:
                        print("‚îÇ")
                        print("‚îú‚îÄ ‚ö° –ü–†–ò–ú–ï–ù–ï–ù–ò–ï LoRA:")
                        lora_names = [f"jl_lora_{i}" for _, i in loaded_loras]
                        lora_scales = [params.lora_scales[i] if i < len(params.lora_scales) else 1.0 
                                     for _, i in loaded_loras]
                        
                        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Å–∞—Ö
                        for idx, (lora_name, i) in enumerate(loaded_loras):
                            scale = lora_scales[idx]
                            print(f"‚îÇ  ‚îú‚îÄ {lora_name} (scale: {scale})")

                        jl_pipe.set_adapters(lora_names, adapter_weights=lora_scales)
                        if params.image_input is not None:
                            lora_i2i_names = [f"jl_lora_i2i_{i}" for _, i in loaded_loras]
                            jl_pipe_i2i.set_adapters(lora_i2i_names, adapter_weights=lora_scales)
                        
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç —Å trigger words
                    print("‚îÇ")
                    print("‚îú‚îÄ üìù –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø –ü–†–û–ú–ü–¢–ê:")
                    print(f"‚îÇ  ‚îî‚îÄ {modified_prompt}")
                    print("="*80 + "\n")
                    params.prompt = modified_prompt

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—Ä–æ–º–ø—Ç–∞
                params.prompt = check_prompt_length(params.prompt)

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
                device = "cuda" if torch.cuda.is_available() else "cpu"
                generator = torch.Generator(device=device).manual_seed(params.seed)

                print("\n" + "="*80)
                print("üé® –ù–ê–ß–ê–õ–û –ì–ï–ù–ï–†–ê–¶–ò–ò")
                print(f"‚è±Ô∏è  –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%H:%M:%S')}")
                print("="*80 + "\n")

                # –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ img2img
                if params.image_input:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    input_image = decode_base64_image(params.image_input)
                    start_time = time.time()

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    input_filename = f"input_{timestamp}.png"
                    input_path = save_img2img_input(input_image, input_filename)

                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
                    real_strength = calculate_img2img_impact(params.image_strength)
                    adjusted_steps = calculate_actual_steps(params.steps, params.image_strength)

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è image-to-image
                    print(f"üìù –ü—Ä–æ–º–ø—Ç: {params.prompt}")
                    print(f"\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã img2img:")
                    print(f"‚îú‚îÄ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —à–∞–≥–∏: {params.steps}")
                    print(f"‚îú‚îÄ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–≥–∏: {adjusted_steps}")
                    print(f"‚îú‚îÄ –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ –≤–ª–∏—è–Ω–∏—è: {params.image_strength:.2f}")
                    print(f"‚îú‚îÄ –†–µ–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ –≤–ª–∏—è–Ω–∏—è: {real_strength:.2f}")
                    print(f"‚îî‚îÄ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {input_image.size}\n")

                    result = await asyncio.to_thread(
                        jl_pipe_i2i,
                        prompt=params.prompt,
                        max_sequence_length=params.max_sequence_length,
                        image=input_image,
                        strength=real_strength,
                        num_inference_steps=adjusted_steps,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        guidance_scale=params.cfg_scale,
                        width=params.width,
                        height=params.height,
                        generator=generator,
                        output_type="pil"
                    )
                    
                    final_image = result.images[0]
                    total_time = time.time() - start_time

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    filename = generate_filename(params.prompt, params.seed, params.save_format, params.save_name_format)
                    filepath = output_dir / f"{filename}.{params.save_format.lower()}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                    final_image = final_image.convert('RGB')
                    if params.save_format.upper() == 'PNG':
                        final_image.save(filepath, format='PNG', optimize=False, bits=16)
                    else:
                        final_image.save(
                            filepath, 
                            format=params.save_format.upper(), 
                            quality=100,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                            optimize=False  # –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
                        )   

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    metadata = {
                        'prompt': params.prompt,
                        'seed': params.seed,
                        'steps': params.steps,
                        'cfg_scale': params.cfg_scale,
                        'width': params.width,
                        'height': params.height,
                        'save_format': params.save_format,
                        'save_quality': params.save_quality,
                        'lora_indices': params.lora_indices,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ LoRA
                        'lora_scales': params.lora_scales,
                        'timestamp': str(datetime.now()),
                        'generation_time': format_time(total_time)
                    }

                    if params.image_input:  # –¥–ª—è img2img
                        metadata['img2img'] = {
                            'input_image': input_path,  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –≤—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                            'strength': params.image_strength
                        }
                    print(f"–°–æ—Ö—Ä–∞–Ω—è—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:", metadata) # –î–æ–±–∞–≤—å—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    
                    metadata_path = filepath.with_suffix('.json')
                    with open(metadata_path, 'w', encoding='utf-8') as f:
                        json.dump(metadata, f, ensure_ascii=False, indent=2)

                    print("\n" + "="*80)
                    print("‚ú® –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
                    print(f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è: {format_time(total_time)}")
                    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç: {filepath}")
                    print("="*80 + "\n")
                    
                    yield f"data: {json.dumps({'status': 'complete', 'result': f'{filename}.{params.save_format.lower()}'})}\n\n"

                # –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                else:
                    start_time = time.time()
                    step_times = []
                    last_update = start_time
                    is_finished = False
                    final_image = None

                    for i, img in enumerate(JL_flux_pipe_call_that_returns_an_iterable_of_images(
                        jl_pipe,
                        prompt=params.prompt,
                        max_sequence_length=params.max_sequence_length,
                        height=params.height,
                        width=params.width,
                        num_inference_steps=params.steps,
                        guidance_scale=params.cfg_scale,
                        generator=generator,
                        output_type="pil",
                        good_vae=jl_good_vae
                    )):
                        current_step = i + 1
                        current_time = time.time()
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ —à–∞–≥
                        step_time = current_time - last_update
                        step_times.append(step_time)
                        last_update = current_time
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —à–∞–≥ –∏ ETA
                        avg_step_time = sum(step_times) / len(step_times)
                        eta = avg_step_time * (params.steps - current_step)
                        elapsed_time = current_time - start_time

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        progress = current_step / params.steps
                        stage = get_stage(progress)

                        if i == params.steps - 1:
                            is_finished = True
                            final_image = img
                            total_time = time.time() - start_time
                        
                        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        sys.stdout.write('\r')
                        sys.stdout.write(f"[{'=' * (current_step * 50 // params.steps)}{' ' * (50 - current_step * 50 // params.steps)}] ")
                        sys.stdout.write(f"{current_step}/{params.steps} ")
                        sys.stdout.write(f"({(current_step/params.steps)*100:.1f}%) ")
                        sys.stdout.write(f"[–ø—Ä–æ—à–ª–æ: {format_time(elapsed_time)} / –æ—Å—Ç–∞–ª–æ—Å—å: {format_time(eta)}] ")
                        sys.stdout.flush()

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                        progress_data = {
                            'status': 'progress',
                            'progress': progress, 
                            'step': current_step,
                            'total_steps': params.steps,
                            'elapsed': format_time(elapsed_time),
                            'eta': format_time(eta),
                            'stage': stage
                        }
                        yield f"data: {json.dumps(progress_data)}\n\n"

                        if is_finished and final_image:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            filename = generate_filename(params.prompt, params.seed, params.save_format, params.save_name_format)
                            filepath = output_dir / f"{filename}.{params.save_format.lower()}"
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                            final_image = final_image.convert('RGB')
                            if params.save_format.upper() == 'PNG':
                                final_image.save(filepath, format='PNG', optimize=False, bits=16)
                            else:
                                final_image.save(
                                    filepath, 
                                    format=params.save_format.upper(), 
                                    quality=100,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                                    optimize=False  # –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
                                )   

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                            metadata = {
                                'prompt': params.prompt,
                                'seed': params.seed,
                                'steps': params.steps,
                                'cfg_scale': params.cfg_scale,
                                'width': params.width,
                                'height': params.height,
                                'save_format': params.save_format,
                                'save_quality': params.save_quality,
                                'lora_indices': params.lora_indices,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ LoRA
                                'lora_scales': params.lora_scales,                                
                                'timestamp': str(datetime.now()),
                                'generation_time': format_time(total_time)
                            }
                            print(f"–°–æ—Ö—Ä–∞–Ω—è—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:", metadata) # –î–æ–±–∞–≤—å—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            
                            metadata_path = filepath.with_suffix('.json')
                            with open(metadata_path, 'w', encoding='utf-8') as f:
                                json.dump(metadata, f, ensure_ascii=False, indent=2)

                            print("\n" + "="*80)
                            print("‚ú® –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
                            print(f"‚åõ –û–±—â–µ–µ –≤—Ä–µ–º—è: {format_time(total_time)}")
                            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç: {filepath}")
                            print("="*80 + "\n")

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            yield f"data: {json.dumps({'status': 'complete', 'result': f'{filename}.{params.save_format.lower()}'})}\n\n"

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
                yield f"data: {json.dumps({'status': 'error', 'message': str(e)})}\n\n"

        return StreamingResponse(
            generate_stream(),
            media_type="text/event-stream"
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/list-output")
async def list_output_images():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ output"""
    try:
        output_dir = Path("output")
        images = []
        
        for file in output_dir.glob("*"):
            if file.suffix.lower() in ['.png', '.jpg', '.jpeg', '.webp']:
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                metadata_file = file.with_suffix('.json')
                metadata = None
                if metadata_file.exists():
                    try:
                        with open(metadata_file, 'r', encoding='utf-8') as f:
                            metadata = json.load(f)
                    except:
                        pass

                images.append({
                    "filename": file.name,
                    "timestamp": datetime.fromtimestamp(file.stat().st_mtime).isoformat(),
                    "metadata": metadata
                })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
        images.sort(key=lambda x: x["timestamp"], reverse=True)
        
        return {
            "status": "success",
            "images": images
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/open-output-folder/{filename}")
async def open_output_folder(filename: str):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ output —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞"""
    try:
        output_path = Path("output").absolute()
        file_path = output_path / filename
        
        if sys.platform == 'win32':
            subprocess.run(['explorer', '/select,', str(file_path)])
        elif sys.platform == 'darwin':  # macOS
            subprocess.run(['open', '-R', str(file_path)])
        else:  # linux
            subprocess.run(['xdg-open', str(output_path)])
            
        return {"status": "success"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
app.mount("/output", StaticFiles(directory="output"), name="output")
app.mount("/img2img", StaticFiles(directory="img2img"), name="img2img")
app.mount("/", StaticFiles(directory="html", html=True), name="static")

if __name__ == "__main__":
    import uvicorn
    import requests
    import time

    def signal_handler(sig, frame):
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")
        sys.exit(0)

    def get_ngrok_url():
        for _ in range(3):
            try:
                response = requests.get('http://127.0.0.1:4040/api/tunnels')
                return response.json()['tunnels'][0]['public_url']
            except:
                time.sleep(1)
        return None

    signal.signal(signal.SIGINT, signal_handler)

    print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ JL Studio...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://127.0.0.1:7860")
    url = get_ngrok_url()
    if url:
        print(f"üåê –ü—É–±–ª–∏—á–Ω—ã–π URL: {url}\n")
    
    config = uvicorn.Config(
        "api:app",
        host="127.0.0.1",
        port=7860,
        reload=False,
        log_level="error"
    )
    
    try:
        server = uvicorn.Server(config)
        server.run()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    finally:
        print("‚ú® –†–∞–±–æ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")