import os
import sys
import shutil
import subprocess
from pathlib import Path
from huggingface_hub import snapshot_download
from tqdm import tqdm
import psutil

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
FLUX_REPO = "black-forest-labs/FLUX.1-dev"
MODEL_DIR = "models/flux"
VENV_DIR = "venv"
OUTPUT_DIR = "output"
IMG2IMG_DIR = "img2img"
REQUIRED_SPACE_GB = 50

def check_free_space(path="."):
    free_space = psutil.disk_usage(path).free / (1024**3)
    if free_space < REQUIRED_SPACE_GB:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ!")
        print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {REQUIRED_SPACE_GB} GB")
        print(f"–î–æ—Å—Ç—É–ø–Ω–æ: {free_space:.1f} GB")
        return False
    return True

def run_command(command, description):
    print(f"\n>>> {description}...")
    try:
        process = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True
        )
        
        for line in process.stdout:
            print(line.strip())
            
        process.wait()
        
        if process.returncode == 0:
            print(f"‚úì {description} - —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ {description}")
            return False
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ {description}: {e}")
        return False

def create_directory_structure():
    directories = [
        MODEL_DIR,
        f"{MODEL_DIR}/loras",
        f"{MODEL_DIR}/transformer",
        f"{MODEL_DIR}/vae",
        f"{MODEL_DIR}/text_encoder",
        f"{MODEL_DIR}/text_encoder_2",
        f"{MODEL_DIR}/tokenizer",
        f"{MODEL_DIR}/tokenizer_2",
        f"{MODEL_DIR}/scheduler",
        OUTPUT_DIR,
        IMG2IMG_DIR,
        "logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {directory}")

def create_startup_script():
    content = """@echo off
chcp 65001 > nul
cd /d "%~dp0"
call venv\\Scripts\\activate.bat
echo –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ JL Studio...
echo.
echo ‚ö° –ê–¥—Ä–µ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: http://127.0.0.1:7860
echo.
python api.py
pause"""
    
    with open("START-WEB_JL_STUDIO.bat", "w", encoding='utf-8') as f:
        f.write(content)
    
    print("‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞")

def move_model_file():
    source_file = Path(MODEL_DIR) / "flux1-dev.safetensors"
    target_file = Path(MODEL_DIR) / "transformer" / "flux1-dev.sft"
    
    if source_file.exists() and not target_file.exists():
        try:
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏...")
            shutil.move(source_file, target_file)
            print("‚úÖ –§–∞–π–ª –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏: {e}")
            return False
    return True

def download_tokenizer_files():
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    try:
        auth_token = Path('token.txt').read_text().strip()
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        # CLIP —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
        clip_files = [
            "https://huggingface.co/openai/clip-vit-large-patch14/resolve/main/vocab.json",
            "https://huggingface.co/openai/clip-vit-large-patch14/resolve/main/merges.txt",
            "https://huggingface.co/openai/clip-vit-large-patch14/resolve/main/tokenizer_config.json",
            "https://huggingface.co/openai/clip-vit-large-patch14/resolve/main/special_tokens_map.json"
        ]
        
        tokenizer_path = Path(MODEL_DIR) / "tokenizer"
        tokenizer_path.mkdir(parents=True, exist_ok=True)
        
        import requests
        for url in clip_files:
            filename = url.split('/')[-1]
            filepath = tokenizer_path / filename
            
            if not filepath.exists():
                response = requests.get(url, headers=headers)
                response.raise_for_status()
                
                with open(filepath, 'wb') as f:
                    f.write(response.content)
                print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω {filename}")
                
        # T5 —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
        t5_url = "https://huggingface.co/google/t5-v1_1-xxl/resolve/main/spiece.model"
        t5_path = Path(MODEL_DIR) / "tokenizer_2" / "spiece.model"
        
        if not t5_path.exists():
            response = requests.get(t5_url, headers=headers)
            response.raise_for_status()
            
            with open(t5_path, 'wb') as f:
                f.write(response.content)
            print("‚úì –ó–∞–≥—Ä—É–∂–µ–Ω spiece.model")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return False

def download_and_setup_model():
    print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ FLUX...")
    
    try:
        auth_token = Path('token.txt').read_text().strip()
    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
        
    allowed_patterns = [
        "*.json",
        "*.safetensors",
        "*.bin",
        "*.sft",
        "spiece.model",
        "tokenizer.json"
    ]
    
    ignored_patterns = [
        "*.md",
        ".gitattributes",
        "*.jpg",
        "*.png",
        "*.txt",
        "ae.safetensors"
    ]
    
    try:
        components = [
            "transformer",
            "vae",
            "text_encoder",
            "text_encoder_2",
            "tokenizer",
            "tokenizer_2",
            "scheduler"
        ]
        
        for component in components:
            component_dir = Path(MODEL_DIR) / component
            component_dir.mkdir(parents=True, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
        snapshot_download(
            FLUX_REPO,
            local_dir=MODEL_DIR,
            local_dir_use_symlinks=False,
            resume_download=True,
            token=auth_token,
            allow_patterns=allowed_patterns,
            ignore_patterns=ignored_patterns
        )
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
        if not move_model_file():
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
        if not download_tokenizer_files():
            return False
            
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def check_requirements():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
        python_version = sys.version_info
        if python_version.major != 3 or python_version.minor != 10:
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.10")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è CUDA
        try:
            import torch
            if not torch.cuda.is_available():
                print("‚ö†Ô∏è CUDA –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ CPU (–æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ)")
            else:
                print(f"‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω GPU: {torch.cuda.get_device_name(0)}")
        except ImportError:
            pass
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {e}")
        return False

def setup_environment():
    current_dir = Path.cwd()
    print(f"üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {current_dir}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    if not check_free_space():
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_requirements():
        return False

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not (current_dir / VENV_DIR).exists():
        if not run_command("python -m venv venv", "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"):
            return False

    venv_python = str(current_dir / VENV_DIR / "Scripts" / "python.exe")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    commands = [
        (f'"{venv_python}" -m pip install --upgrade pip', "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"),
        (f'"{venv_python}" -m pip install huggingface_hub tqdm colorama requests', "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
        (f'"{venv_python}" -m pip install torch==2.3.0 torchvision==0.18.0+cu118 torchaudio==2.3.0+cu118 --extra-index-url https://download.pytorch.org/whl/cu118', "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch"),
        (f'"{venv_python}" -m pip install -r requirements.txt', "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    ]
    
    for cmd, desc in commands:
        if not run_command(cmd, desc):
            return False

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    create_directory_structure()
    create_startup_script()

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏
    if not download_and_setup_model():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏")
        return False

    print("\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ START-WEB_JL_STUDIO.bat –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://127.0.0.1:7860")
    return True

if __name__ == "__main__":
    try:
        if not setup_environment():
            print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")